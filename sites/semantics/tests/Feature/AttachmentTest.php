<?php

namespace Tests\Feature;

use App\Models\Attachment;
use App\Models\Post;
use Database\Factories\AttachmentFactory;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\Storage;
use Tests\TestCase;

/**
 * Class AttachmentTest
 * @package Tests\Feature
 */
class AttachmentTest extends TestCase
{

    /**
     * Executé avant les tests
     */
    public function setUp(): void
    {
        parent::setUp();
        Artisan::call('migrate');
        $this->cleanDirectories();
    }

    /**
     * Executé après les tests
     */
    public function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        $this->cleanDirectories();
    }

    /**
     * Lien du fichier attaché
     * @param $attachment
     * @return string
     */
    public function getFileForAttachment($attachment)
    {
        return dirname(__DIR__) . '/fixtures/uploads/' . $attachment['name'];
    }

    /**
     * Suppression du répertoire images
     */
    public function cleanDirectories()
    {
        Storage::disk('public')->deleteDirectory('fixtures/uploads');
    }

    /**
     * Appel la route store attachment : Création d'un nouvel attachment
     * @param array $data
     * @return \Illuminate\Testing\TestResponse
     */
    private function callController($data = [])
    {
        $path = dirname(__DIR__) . '/fixtures/image_test.jpg';
        $file = new UploadedFile($path, 'image_test.jpg', 'image/jpeg', null, true);
        $post = Post::create(['name' => 'demo', 'content' => 'demo']);
        $default = [
            'attachable_type' => Post::class,
            'attachable_id' => $post->id,
            'image' => $file
        ];
        return $this->post(route('attachments.store'), array_merge($default, $data));
    }

    /**
     * Test si le param_tre attachable_type est invalide
     */
    public function testIncorrectDataAttachableType()
    {
        $response = $this->callController(['attachable_type' => 'POOOO']);

        $response->assertJsonStructure(['attachable_type']);
        $response->assertStatus(422);
    }

    /**
     * Test si le param_tre attachable_id est invalide
     */
    public function testIncorrectDataAttachableId()
    {
        $response = $this->callController(['attachable_id' => 3]);

        $response->assertJsonStructure(['attachable_id']);
        $response->assertStatus(422);
    }

    /**
     * Test si un attachable est créé correctement
     */
    public function testCorrectData()
    {
        $response = $this->callController();
        $attachment = $response->json();
        $this->assertFileExists($this->getFileForAttachment($attachment));
        $response->assertJsonStructure(['id', 'url']);
        $this->assertStringContainsString('/uploads/', $attachment['url']);

        $response->assertStatus(201);
    }

    /**
     * Test si le fichier img est bien supprimé lors de la suppression d'un attachment
     */
    public function testDeleteAttachmentDeleteFile()
    {
        $response = $this->callController();
        $attachment = $response->json();
        $this->assertFileExists($this->getFileForAttachment($attachment));
        Attachment::find($attachment['id'])->delete();
        $this->assertFileDoesNotExist($this->getFileForAttachment($attachment));
    }

    /**
     * Test si lors de la suppression d'un article, tous les attachments sont bien supprimés
     */
    public function testDeletePostDeleteAllAttachments()
    {
        $response = $this->callController();
        $attachment = $response->json();
        Attachment::factory()->count(3)->create(); // On cree 3 nouveaux fichiers attachés fictifs (Total 4)
        $this->assertFileExists($this->getFileForAttachment($attachment));
        $this->assertEquals(4, Attachment::count());
        Post::first()->delete(); // Supprime le fichier attaché au post
        $this->assertEquals(3, Attachment::count());
        $this->assertFileDoesNotExist($this->getFileForAttachment($attachment));
    }

    /**
     * Test si lors de la modification d'un article, tous les attachments sont bien supprimés
     */
    public function testDeletePostContentAttachmentsAreDeleted()
    {
        $response = $this->callController();
        $attachment = $response->json();
        Attachment::factory()->count(3)->create(); // On cree 3 nouveaux fichiers attachés fictifs (Total 4)
        $this->assertFileExists($this->getFileForAttachment($attachment));
        $this->assertEquals(4, Attachment::count());
        $post = Post::first();
        $post->content = "<img src=\"{$attachment['url']}\"/>";
        $post->save();
        $this->assertEquals(4, Attachment::count());
        $post->content = "";
        $post->save();
        $this->assertEquals(3, Attachment::count());
        $this->assertFileDoesNotExist($this->getFileForAttachment($attachment));
    }
}
